definitions:
  entity.Device:
    properties:
      channel:
        $ref: '#/definitions/enum.Sender'
      deviceMeta:
        type: string
      deviceName:
        type: string
      identifier:
        type: string
    type: object
  entity.Message:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      long:
        type: string
      priority:
        $ref: '#/definitions/enum.Priority'
      title:
        type: string
    type: object
  enum.Priority:
    enum:
    - low
    - normal
    - high
    type: string
    x-enum-comments:
      PriorityHigh: high
      PriorityLow: low
      PriorityNormal: normal
    x-enum-varnames:
    - PriorityLow
    - PriorityNormal
    - PriorityHigh
  enum.Sender:
    enum:
    - FCM
    - WebPush
    - WNS
    - Telegram
    - WebSocket
    type: string
    x-enum-comments:
      SenderFcm: FCM
      SenderTelegram: Telegram
      SenderWebPush: WebPush
      SenderWebSocket: WebSocket
      SenderWns: WNS
    x-enum-varnames:
    - SenderFcm
    - SenderWebPush
    - SenderWns
    - SenderTelegram
    - SenderWebSocket
  push.info:
    properties:
      enable:
        type: boolean
      public_key:
        type: string
    type: object
  types.BadRequestResponse:
    properties:
      body:
        type: string
      code:
        default: 400
        type: integer
    type: object
  types.NotFoundResponse:
    properties:
      body:
        type: string
      code:
        default: 404
        type: integer
    type: object
  types.Response-array_entity_Device:
    properties:
      body:
        items:
          $ref: '#/definitions/entity.Device'
        type: array
      code:
        default: 200
        type: integer
    type: object
  types.Response-array_entity_Message:
    properties:
      body:
        items:
          $ref: '#/definitions/entity.Message'
        type: array
      code:
        default: 200
        type: integer
    type: object
  types.Response-bool:
    properties:
      body:
        type: boolean
      code:
        default: 200
        type: integer
    type: object
  types.Response-entity_Message:
    properties:
      body:
        $ref: '#/definitions/entity.Message'
      code:
        default: 200
        type: integer
    type: object
  types.Response-push_info:
    properties:
      body:
        $ref: '#/definitions/push.info'
      code:
        default: 200
        type: integer
    type: object
  types.UnauthorizedResponse:
    properties:
      body:
        type: string
      code:
        default: 401
        type: integer
    type: object
info:
  contact:
    name: Issues
    url: https://github.com/ZNotify/server/issues
  description: This is Znotify api server.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Notify API
  version: "1.0"
paths:
  /:
    get:
      description: Provide UI
      operationId: webIndex
      produces:
      - text/html
      responses:
        "200":
          description: html
          schema:
            type: string
      summary: Web Index
      tags:
      - UI
  /{user_secret}:
    post:
      consumes:
      - text/plain
      description: Send notification to user_id
      operationId: sendMessageLite
      parameters:
      - description: Secret of user
        in: path
        name: user_secret
        required: true
        type: string
      - description: Message Content
        in: body
        name: string
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response-entity_Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.UnauthorizedResponse'
      summary: Send notification
      tags:
      - Message
  /{user_secret}/conn:
    get:
      description: Work as a fallback strategy for device without public push provider,
        each frame in this connection will be a push message
      operationId: websocket
      parameters:
      - description: Device ID, usually a UUID
        in: header
        name: X-Device-ID
        required: true
        type: string
      - description: Secret of user
        in: path
        name: user_secret
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.UnauthorizedResponse'
      summary: Endpoint for websocket connection
      tags:
      - Push
  /{user_secret}/device/{device_id}:
    delete:
      description: Delete device with device_id
      operationId: deleteDevice
      parameters:
      - description: Secret of user
        in: path
        name: user_secret
        required: true
        type: string
      - description: The identifier of device, should be a UUID
        in: path
        name: device_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response-bool'
      summary: Delete device
      tags:
      - Device
    put:
      description: Create or update device information
      operationId: createDevice
      parameters:
      - description: Secret of user
        in: path
        name: user_secret
        required: true
        type: string
      - description: device_id should be a valid UUID
        in: path
        name: device_id
        required: true
        type: string
      - description: channel can be used.
        enum:
        - FCM
        - WebPush
        - WNS
        - Telegram
        - WebSocket
        in: formData
        name: channel
        required: true
        type: string
      - description: device name
        in: formData
        name: device_name
        type: string
      - description: additional device meta
        in: formData
        name: device_meta
        type: string
      - description: channel token
        in: formData
        name: token
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response-bool'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.UnauthorizedResponse'
      summary: Create or update device
      tags:
      - Device
  /{user_secret}/devices:
    get:
      description: Delete device with device_id
      operationId: getDevicesByUserSecret
      parameters:
      - description: Secret of user
        in: path
        name: user_secret
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response-array_entity_Device'
      summary: Get user devices
      tags:
      - User
  /{user_secret}/message/{id}:
    delete:
      description: Delete message record with id
      operationId: deleteMessageById
      parameters:
      - description: Secret of user
        in: path
        name: user_secret
        required: true
        type: string
      - description: ID of message
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response-bool'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.UnauthorizedResponse'
      summary: Delete message record
      tags:
      - Message
    get:
      description: Get message record detail of a message
      operationId: getMessageById
      parameters:
      - description: Secret of user
        in: path
        name: user_secret
        required: true
        type: string
      - description: ID of message
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response-entity_Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.UnauthorizedResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.NotFoundResponse'
      summary: Get message record detail
      tags:
      - Message
  /{user_secret}/messages:
    get:
      description: Get messages of user with pagination
      operationId: getMessagesByUserSecret
      parameters:
      - description: Secret of user
        in: path
        name: user_secret
        required: true
        type: string
      - default: 0
        description: The number of records to skip
        in: query
        minimum: 0
        name: skip
        type: integer
      - default: 20
        description: The number of records to return
        in: query
        maximum: 100
        minimum: 0
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response-array_entity_Message'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.UnauthorizedResponse'
      summary: Get messages of user
      tags:
      - User
  /{user_secret}/send:
    post:
      description: Send notification to user_id
      operationId: sendMessage
      parameters:
      - description: Secret of user
        in: path
        name: user_secret
        required: true
        type: string
      - default: Notification
        description: Message Title
        in: formData
        name: title
        type: string
      - description: Message Content
        in: formData
        name: content
        required: true
        type: string
      - description: Long Message Content (optional)
        in: formData
        name: long
        type: string
      - default: normal
        description: The priority of message
        enum:
        - low
        - normal
        - high
        in: formData
        name: priority
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response-entity_Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.UnauthorizedResponse'
      summary: Send notification
      tags:
      - Message
  /alive:
    get:
      description: If the server is alive
      operationId: alive
      produces:
      - text/plain
      responses:
        "204":
          description: No Content
          schema:
            type: string
      summary: Server Heartbeat
      tags:
      - Health
  /check:
    get:
      operationId: checkUserSecret
      parameters:
      - description: Secret of user
        in: query
        name: user_secret
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response-bool'
      summary: Check if the user secret is valid
      tags:
      - User
  /docs:
    get:
      operationId: docRedirect
      produces:
      - text/plain
      responses:
        "301":
          description: Moved Permanently
          schema:
            type: string
      summary: Redirect to docs
      tags:
      - UI
  /login:
    get:
      operationId: userLogin
      responses:
        "307":
          description: Temporary Redirect
      summary: Login with GitHub
      tags:
      - User
  /login/github:
    get:
      operationId: githubOAuthCallback
      parameters:
      - description: should always be 'no_need_to_set_state'
        in: query
        name: state
        type: string
      - description: access code
        in: query
        name: code
        required: true
        type: string
      responses:
        "307":
          description: Temporary Redirect
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.BadRequestResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/types.UnauthorizedResponse'
      summary: OAuth callback for GitHub, redirect to ui with user_secret
      tags:
      - User
  /webpush:
    get:
      description: Check if this znotify instance support webpush and get public key
      operationId: webpush
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Response-push_info'
      summary: Endpoint for webpush info check
      tags:
      - Push
swagger: "2.0"
tags:
- description: Device management
  name: Device
- description: User management
  name: User
- description: Message management
  name: Message
- description: Health check
  name: Health
- description: UI for documentation and WebPush
  name: UI
- description: Endpoint for push service
  name: Push
