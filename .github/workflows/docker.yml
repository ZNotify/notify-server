name: Build Docker Image

on:
  workflow_call:

env:
  IMAGE_NAME: notify-api

permissions: write-all

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - name: Check should deploy
        id: check
        uses: actions/github-script@v6
        with:
          script: |
            const event_type = context.eventName;
            if (event_type === 'repository_dispatch') {
                core.setOutput('should_deploy', false);
                return;
            }
            const commit_message = context.payload.head_commit.message
            const should_deploy = commit_message.includes('[deploy]')
            core.setOutput('should_deploy', should_deploy)

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          check-latest: true
          go-version-file: 'go.mod'
          cache: true

      - name: Prefetch dependencies
        run: go mod vendor && make frontend

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@master

      - name: Log into Docker Hub
        uses: docker/login-action@master
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Log into GitHub Package
        uses: docker/login-action@master
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Release metadata
        id: meta
        uses: docker/metadata-action@master
        with:
          tags: |
            type=ref,event=branch
          images: zxilly/${{ env.IMAGE_NAME }},ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}

      - name: Build and push Release Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64, linux/arm64/v8
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=docker
          cache-to: type=gha,scope=docker,mode=max
          build-args: |
            PREFETCHED=true

  clean:
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Clean outdated image
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const response = await github.request("GET /${{ env.OWNER }}/packages/container/${{ env.PACKAGE_NAME }}/versions",
              { per_page: ${{ env.PER_PAGE }}
            });
            for(version of response.data) {
                if (version.metadata.container.tags.length == 0) {
                    console.log("delete " + version.id)
                    const deleteResponse = await github.request("DELETE /${{ env.OWNER }}/packages/container/${{ env.PACKAGE_NAME }}/versions/" + version.id, { });
                    console.log("status " + deleteResponse.status)
                }
            }
        env:
          OWNER: orgs/ZNotify
          PACKAGE_NAME: notify-api
          PER_PAGE: 100

  deploy:
    runs-on: ubuntu-latest
    needs: [ build, check ]
    environment: production
    if: needs.check.outputs.should_deploy == 'true'
    steps:
      - name: Deploy to production
        if: steps.check.outputs.shouldDeploy == 'true'
        run: |
          curl -X POST ${{ secrets.DEPLOY_URL }}